name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check --diff src/ tests/
    
    - name: Run Flake8 linter
      run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run MyPy type checker
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
        # For GUI testing
        sudo apt-get install -y xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-qt pytest-mock
        pip install -r requirements.txt
    
    - name: Create test directories
      run: |
        mkdir -p src/resources/models
        mkdir -p src/resources/sample_videos
        mkdir -p logs
    
    - name: Run tests with coverage
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        # Linux: use xvfb for GUI tests
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          xvfb-run -a pytest tests/ --cov=src --cov-report=xml --cov-report=html -v
        else
          pytest tests/ --cov=src --cov-report=xml --cov-report=html -v
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: safety check --json
    
    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit scan results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # Build Tests
  build:
    name: Build Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Test package installation
      run: |
        pip install -e .
        python -c "import src.main; print('Package import successful')"
    
    - name: Build executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --windowed --name recycling-detection src/main.py
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name recycling-detection.exe src/main.py
    
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: executable-${{ matrix.os }}
        path: dist/

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t smart-recycling-detection:test .
    
    - name: Test Docker image
      run: |
        docker run --rm smart-recycling-detection:test python -c "import src.main; print('Docker build successful')"
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: github.event_name == 'release'
      run: |
        docker tag smart-recycling-detection:test yourusername/smart-recycling-detection:latest
        docker tag smart-recycling-detection:test yourusername/smart-recycling-detection:${{ github.event.release.tag_name }}
        docker push yourusername/smart-recycling-detection:latest
        docker push yourusername/smart-recycling-detection:${{ github.event.release.tag_name }}

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt
    
    - name: Check documentation links
      run: |
        # Check for broken links in README
        python -c "
        import re
        with open('README.md', 'r') as f:
            content = f.read()
        # Basic link validation
        links = re.findall(r'\[.*?\]\((.*?)\)', content)
        print(f'Found {len(links)} links in README.md')
        "
    
    - name: Validate documentation structure
      run: |
        # Check that all referenced docs exist
        python -c "
        from pathlib import Path
        docs_dir = Path('docs')
        required_docs = ['installation.md', 'usage.md', 'api_reference.md', 'development.md']
        for doc in required_docs:
            if not (docs_dir / doc).exists():
                print(f'Warning: Missing documentation file: {doc}')
        "

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        python -m build
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release assets
      run: |
        # Organize release assets
        mkdir -p release-assets
        cp dist/* release-assets/ 2>/dev/null || true
        cp -r executable-*/* release-assets/ 2>/dev/null || true
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All CI checks passed successfully!"
    
    - name: Notify failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Some CI checks failed. Please review the logs."
        exit 1